@page "/products"
@inject ProductService productService;


<h1 class="text-primary">Product List</h1>


@* thanh search *@
<div class="input-group mb-3">
    <input 
    type="text" 
    class="form-control" 
    placeholder="Search Product" 
    @bind="SearchQuery"
    @bind:event="oninput"
    @onkeydown="HandleEnter"
    >
    <button class="btn btn-primary" @onclick="SearchProduct">Search</button>
</div>

@if(IsLoading) 
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading...</p>
    </div>
}
else if(products.Count == 0) 
{   
    <p>No product found...</p>
}
else 
{
    <div class="row row-cols-md-3">
        @foreach(var product in displayProducts) 
        {
            <div class="col">
            <ProductItem product="product" />
        </div>
        }
        
    </div>
}

@* Phân trang *@
<div>
    <button class="btn btn-primary" @onclick="PrevPage">Prev</button>
    <span>Page @CurrentPage / @TotalPages</span>
    <button class="btn btn-primary" @onclick="NextPage">Next</button>
</div>

@code {
    private List<Product> products = new List<Product>();

    private List<Product> displayProducts = new List<Product>();

    private List<Product> filterProducts = new List<Product>();
    
    private bool IsLoading = true;
    private string SearchQuery = "";
    private int CurrentPage = 1;
    private int PageSize = 6;
    private int totalPages;
    private int TotalPages 
    {
        get => (int)Math.Ceiling((double)products.Count / PageSize);
        set 
        {
            totalPages = value;
        }
    }

    @* Dùng hàm OnInitial *@
    protected override async Task OnInitializedAsync() 
    {
        await LoadData();
        Console.WriteLine(TotalPages);
    }

    private void UpdateDisplayProducts() 
    {
        displayProducts = products.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        @* StateHasChanged(); *@
    }

    private async Task LoadData() 
    {
        try 
        {
            products = await productService.GetProductsAsync();
            IsLoading = false;
            UpdateDisplayProducts();
        }
        catch (Exception ex) 
        {

        }
    }

    private void NextPage() 
    {
        if(CurrentPage < TotalPages) 
        {
            CurrentPage++;
            UpdateDisplayProducts();
        }
        
    }

    private void PrevPage() 
    {
        if(CurrentPage > 0) 
        {
            CurrentPage--;
            UpdateDisplayProducts();
        }
        
    }

    private void SearchProduct() 
    {
        var filterProducts = products
                             .Where(p => string.IsNullOrEmpty(SearchQuery) || p.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
                             .ToList();
        CurrentPage = 1;
        products = filterProducts;
        TotalPages = (int)Math.Ceiling((double)displayProducts.Count / PageSize);
        StateHasChanged();
    }

    private void HandleEnter(KeyboardEventArgs e) 
    {
        if(e.Key == "Enter") 
        {
            SearchProduct();
        }
    }
}